import {
  addImportsSources,
  addTemplate,
  createResolver,
  defineNuxtModule,
  useLogger,
} from "@nuxt/kit";
import { findConfig } from "@pandacss/config";
import { codegen, loadConfigAndCreateContext } from "@pandacss/node";
import { existsSync, promises as fsp } from "node:fs";
import { join } from "pathe";
import { configKey, name, version } from "../package.json";
import { resolveCSSPath } from "./resolvers";
import type { ModuleOptions } from "./types";
import { createPresets } from "./imports/presets";

const logger = useLogger("nuxt:pandacss");

export default defineNuxtModule<ModuleOptions>({
  meta: { name, version, configKey },
  // Default configuration options of the Nuxt module
  defaults: (nuxt) => ({
    preflight: true,
    include: [
      `${nuxt.options.srcDir}/components/**/*.{js,jsx,ts,tsx,vue}`,
      `${nuxt.options.srcDir}/pages/**/*.{js,jsx,ts,tsx,vue}`,
    ],
    exclude: [],
    outdir: "styled-system",
    cwd: nuxt.options.buildDir,
    cssPath: `${nuxt.options.buildDir}/panda.css`,
    autoImports: true,
  }),
  async setup(options, nuxt) {
    const { resolve } = createResolver(import.meta.url);

    const cwd = resolve(options.cwd ?? nuxt.options.buildDir);

    // TODO: dot directory support
    nuxt.options.alias[options.outdir!] = join(cwd, options.outdir!);
    nuxt.options.alias[`${options.outdir!}/*`] = join(
      cwd,
      options.outdir!,
      "./*"
    );

    if (options.autoImports) {
      addImportsSources(createPresets({ outdir: options.outdir }));
    }

    if (existsSync(resolve(nuxt.options.buildDir, "panda.config.mjs"))) {
      await fsp.rm(resolve(nuxt.options.buildDir, "panda.config.mjs"));
    }

    let configPath = "";
    try {
      const configFile = findConfig({ cwd, file: options.configPath });

      configPath = configFile ?? addPandaConfigTemplate(cwd, options);
    } catch (e) {
      const dst = addPandaConfigTemplate(cwd, options);
      configPath = dst;
    }

    const postcssOptions = nuxt.options.postcss;
    postcssOptions.plugins["@pandacss/dev/postcss"] = postcssOptions.plugins[
      "@pandacss/dev/postcss"
    ] ?? {
      configPath,
    };

    // Add CSS file
    const { resolvedCSSPath, loggerMessage } = await resolveCSSPath(
      options.cssPath,
      nuxt
    );
    nuxt.options.css.push(resolvedCSSPath);
    logger.info(loggerMessage);

    function loadContext() {
      return loadConfigAndCreateContext({
        cwd,
        config: { clean: options?.clean },
        configPath,
      });
    }

    async function createPandaContext() {
      const ctx = await loadContext();

      const { msg } = await codegen(ctx);

      logger.log(msg);
    }

    nuxt.hook("app:templatesGenerated", async () => {
      if (!nuxt.options._prepare) {
        await createPandaContext();
      }
    });

    nuxt.hook("prepare:types", async ({ tsConfig }) => {
      // require tsconfig.json for panda css
      const GeneratedBy = "// Generated by nuxt-pandacss";
      const tsConfigPath = resolve(nuxt.options.buildDir, "tsconfig.json");
      await fsp.mkdir(nuxt.options.buildDir, { recursive: true });
      await fsp.writeFile(
        tsConfigPath,
        GeneratedBy + "\n" + JSON.stringify(tsConfig, null, 2)
      );

      if (nuxt.options._prepare) {
        await createPandaContext();
      }
    });
  },
});

function addPandaConfigTemplate(cwd: string, options: ModuleOptions) {
  return addTemplate({
    filename: "panda.config.mjs",
    getContents: () => `
import { defineConfig } from "@pandacss/dev"

export default defineConfig(${JSON.stringify({ ...options, cwd }, null, 2)})`,
    write: true,
  }).dst;
}
